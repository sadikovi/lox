print "## Example 1";

var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

print "## Example 2";

// No initializers.
var a;
var b = 1;
var c = nil;

a = "assigned";
print a; // OK, was assigned first.

print b; // Error!

print c;

print "## Example 3";

var a = 1;
{
  var a = a + 2;
  print a;
}
print a;

100 + 200;

print "## Example 4";

var a = 0;
var b = 1;

while (a < 10000) {
  print a;
  var temp = a;
  a = b;
  b = temp + b;
}

print "## Example 5";

for (var i = 0; i < 10; i = i + 1) {
  print "iteration " + i;
}

print "## Example 6";

var a = 0;

while (a < 100) {
  if (a > 5) {
    print "breaking loop";
    break;
  }
  print a;
  a = a + 1;
}

for (var i = 0; i < 100; i = i + 1) {
  if (i > 5) {
    print "breaking loop";
    break;
  }
  print i;
}

print "## Example 7";

fun fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

for (var i = 0; i < 10; i = i + 1) {
  print i + "th fibonacci number: " + fibonacci(i);
}

print "## Example 8";

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

print "## Example 9";

var a = fun (a, b) {
  print a + ", " + b;
};

print a;
a("test", "2");

fun thrice(fn) {
  for (var i = 1; i <= 3; i = i + 1) {
    fn(i);
  }
}

var b = thrice;
print b;

thrice(fun (a) {
  print a;
});

var c = fun () {};
print c;
c();

// fun () {};
