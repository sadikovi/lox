print "## Example 1";

var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

print "## Example 2";

// No initializers.
var a;
var b = 1;
var c = nil;

a = "assigned";
print a; // OK, was assigned first.

print b; // Error!

print c;

print "## Example 3";

var a = 1;
{
  var a2 = a + 2;
  print a2;
}
print a;

100 + 200;

print "## Example 4";

var a = 0;
var b = 1;

while (a < 10000) {
  print a;
  var temp = a;
  a = b;
  b = temp + b;
}

print "## Example 5";

for (var i = 0; i < 10; i = i + 1) {
  print "iteration " + i;
}

print "## Example 6";

var a = 0;

while (a < 100) {
  if (a > 5) {
    print "breaking loop";
    break;
  }
  print a;
  a = a + 1;
}

for (var i = 0; i < 100; i = i + 1) {
  if (i > 5) {
    print "breaking loop";
    break;
  }
  print i;
}

print "## Example 7";

fun fibonacci(n) {
  if (n <= 1) return n;
  return fibonacci(n - 1) + fibonacci(n - 2);
}

for (var i = 0; i < 10; i = i + 1) {
  print i + "th fibonacci number: " + fibonacci(i);
}

print "## Example 8";

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

print "## Example 9";

var a = fun (a, b) {
  print a + ", " + b;
};

print a;
a("test", "2");

fun thrice(fn) {
  for (var i = 1; i <= 3; i = i + 1) {
    fn(i);
  }
}

var b = thrice;
print b;

thrice(fun (a) {
  print a;
});

var c = fun () {};
print c;
c();

// fun () {};

print "## Example 10";

fun func1() {
  var a = 1;
  print "func1, " + a;
}

fun func2() {
  // var a = nil;
  // var b;
  print "func2";
}

fun func3() {
  print "func3";

  /*
  fun func4() {
    print "func4";
  }
  */
}

func1();
func2();

print "## Example 11";

class MyClass {
  method() {
    return 10;
  }
}

print MyClass;

var a = MyClass();
print a;

a.prop = "field value";
print a.prop;

print "## Example 12";

class MyClass {
  func() {
    return "a: " + this.a + ", b: " + this.b;
  }
}

class MyClass2 {
  func() {
    return 123;
  }

  func2() {
    this.prop = "hello";
    return -1;
  }

  func3() {
    return this.prop;
  }
}

class Test {
  init(a, b, c) {
    print a + ", " + b + ", " + c;
    this.a = a;
    this.b = b;
    this.c = c;
  }
}

var m = MyClass();
m.a = "1";
m.b = 2;
print m.func();

var m = MyClass2();
print m.func();
print m.func2();
print m.func3();

var t = Test(1, 2, 3);
print t.a;
print t.b;
print t.c;

print t.init(2, 3, 4);

/*
print this;

fun method() {
  print this;
}

method();
*/

print "## Example 13";

class Math {
  class square(n) {
    return n * n;
  }

  class add(a, b) {
    return a + b;
  }
}

print Math.square(3); // Prints "9".
print Math.add(1, 2); // Prints "3".

print "## Example 14";

class Circle {
  init(radius) {
    this.radius = radius;
  }

  area() {
    return 0;
  }

  area {
    return 3.141592653 * this.radius * this.radius;
  }
}

var circle = Circle(4);
print circle.area; // Prints roughly "50.2655".
circle.area = 1;
print circle.area; // Prints "1".

class Circle {
  init(radius) {
    this.radius = radius;
  }

  area {
    return 3.141592653 * this.radius * this.radius;
  }

  area() {
    return 0;
  }
}

var circle = Circle(4);
print circle.area; // Prints function.
print circle.area(); // Prints 0.
